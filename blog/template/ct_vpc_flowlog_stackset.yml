AWSTemplateFormatVersion: 2010-09-09
Description: FlowLog - Infrastructure at the spoke account for VPC Flow Log automation
Parameters:
  StackSetName:
    Type: String
    Description: Name of the StackSet
  OrgId:
    Type: String
    Description: The Amazon Organizations ID
    MinLength: 12
    MaxLength: 12
    AllowedPattern: '^[o][\-][a-z0-9]{10}$'
    ConstraintDescription: The Org Id must be a 12 character string starting with o- and followed by 10 lower case alphanumeric characters
  MasterAccount:
    Type: String
    Description: AWS Account ID where the Control Tower deployed
    AllowedPattern: '^[0-9]{12}$'
    MinLength: 12
    MaxLength: 12
  MasterRegion:
    Type: String
    Description: Region where the Control Tower deployed    
    Default: 'us-east-1'
  FlowLogDestinationAccount:
    Type: String
    Description: AWS Account ID where the VPC Flow Log bucket will be created
    AllowedPattern: '^[0-9]{12}$'
    MinLength: 12
    MaxLength: 12
  FlowLogBucketName:
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: '[a-zA-Z0-9-.]*'
    Description: Unique name for the S3 bucket in the destination account
  EventBusDestinationAccount:
    Type: String
    Description: AWS Account ID where the dedicated Event bus will be created
    AllowedPattern: '^[0-9]{12}$'
    MinLength: 12
    MaxLength: 12
  EventBusName:
    Type: String
    Description: Select name of the dedicated event bus that will be created at the Hub account
    Default: FlowLog-EventBus
  ComplianceFrequency:
    Type: Number
    Default: "24"
    Description: Frequency (in hours between 2 and 168, default is 24) to check Flow Logs compliance
    MinValue: 2
    MaxValue: 168
    ConstraintDescription: Compliance Frequency must be a number between 2 and 168, inclusive.
  QSS3BucketName:
    Type: String
    Default: wellsiau-quickstart
    Description: "S3 bucket for the solution assets. Use this if you want to customize your deployment. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but it cannot start or end with hyphens (-)."
  QSS3KeyPrefix:
    Type: String
    Default: ct-vpc-flow-log/
    Description: "S3 key prefix to simulate a directory for Quick Start assets. Use this if you want to customize your deployment. The prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slashes (/). For more information, see https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html."
Mappings: 
  SourceCode:
    Key:
      Activator: "functions/packages/ct_flowlog_activator/lambda.zip"
      LifeCycle: "functions/packages/ct_flowlog_lifecycle/lambda.zip"
  LambdaVariable:
    Tag:
      KeyList: ["flowlog", "flow-log", "flow_log", "FlowLog", "Flow-Log", "Flow_Log"]
      Key: "flowlog, flow-log, flow_log, FlowLog, Flow-Log, Flow_Log"
      All: "all, full, enable, active, true, yes"
      Accept: "accept, pass, allow"
      Reject: "reject, deny, block"
    Role:
      Hub: FlowLogHubRole
      Spoke: FlowLogHubAssumeRole

Conditions:
  CreateS3Bucket: !And 
    - !Equals
      - !Ref FlowLogDestinationAccount
      - !Ref AWS::AccountId
    - !Equals 
      - !Ref MasterRegion
      - !Ref AWS::Region

  OriginRegion: !Equals 
    - !Ref MasterRegion
    - !Ref AWS::Region

  CreateEventBus: !Equals
    - !Ref EventBusDestinationAccount
    - !Ref AWS::AccountId

  CreateEventBusOriginRegion: !And
    - !Equals
      - !Ref EventBusDestinationAccount
      - !Ref AWS::AccountId
    - !Equals 
      - !Ref MasterRegion
      - !Ref AWS::Region

  NonEventBus: !Not
    - !Equals
      - !Ref EventBusDestinationAccount
      - !Ref AWS::AccountId

Resources:
  S3Bucket:
    Condition: CreateS3Bucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Ref FlowLogBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "Supress bucket access logging requirement"

  BucketPolicy:
    Condition: CreateS3Bucket
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: S3BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: AWSLogDeliveryWrite
            Effect: Allow
            Principal:
              Service: 'delivery.logs.amazonaws.com'
            Action:
              - 's3:PutObject'
            Resource:
              - !Join ['',['arn:aws:s3:::',!Ref S3Bucket, '/*']]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AWSLogDeliveryAclCheck
            Effect: Allow
            Principal:
              Service: 'delivery.logs.amazonaws.com'
            Action:
              - 's3:GetBucketAcl'
            Resource:
              - !Join ['',['arn:aws:s3:::',!Ref S3Bucket]]
      Bucket: !Ref S3Bucket

  FlowLogEventBus:
    Condition: CreateEventBus
    Type: AWS::Events::EventBus
    Properties:
      Name: !Ref EventBusName

  FlowLogEventBusPolicy:
    Condition: CreateEventBus
    Type: AWS::Events::EventBusPolicy
    Properties:
        Action: "events:PutEvents"
        Principal: "*"
        StatementId: "AllowSpokeAccountPutEventsToHubAccount"
        EventBusName: !Ref FlowLogEventBus
        Condition:
            Type: "StringEquals"
            Key: "aws:PrincipalOrgID"
            Value: !Ref OrgId

  FlowLogActivatorRole:
    Condition: CreateEventBusOriginRegion
    Type: AWS::IAM::Role
    Properties:
      RoleName: FlowLogActivatorRole
      Description: FlowLog - Role used by Lambda in Hub Account to enable VPC Flow Log
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: FlowLogActivator
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Resource: 
              - !Join ['', ['arn:aws:iam::', '*', ':role/', !FindInMap [LambdaVariable,Role, Spoke]]]
              - !Join ['', ['arn:aws:iam::', !Ref MasterAccount, ':role/', !FindInMap [LambdaVariable,Role, Hub]]]
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref OrgId
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !Sub 'arn:aws:lambda:*:${AWS::AccountId}:function:${AWS::AccountId}-FlowLogActivator'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              -  !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Explicit role name required for reference on other resources" 

  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Condition: CreateEventBus

  CopyZips:
    Type: Custom::CopyZips
    Condition: CreateEventBus
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - !FindInMap ["SourceCode", "Key", "Activator"]
        - !FindInMap ["SourceCode", "Key", "LifeCycle"]

  CopyZipsRole:
    Type: AWS::IAM::Role
    Condition: CreateEventBus
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Condition: CreateEventBus
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  FlowLogActivator:
    Condition: CreateEventBus
    DependsOn: CopyZips
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AWS::AccountId}-FlowLogActivator
      Description: FlowLog - Function to handle incoming events and activate VPC Flow Log in spoke account
      Handler: "ct_flowlog_activator.lambda_handler"
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/FlowLogActivatorRole'
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join ['', [!Ref 'QSS3KeyPrefix', !FindInMap ["SourceCode", "Key", "Activator"]]]
      Runtime: "python3.7"
      MemorySize: 128
      Timeout: 300
      ReservedConcurrentExecutions: 500
      Environment:
        Variables:
            assume_role: !FindInMap [LambdaVariable,Role, Spoke]
            org_id: !Ref OrgId
            s3bucket: !Ref FlowLogBucketName
            master_account: !Ref MasterAccount
            master_role: !FindInMap [LambdaVariable,Role, Hub]
            stackset_name: !Ref StackSetName
            stackset_region: !Ref MasterRegion
            tag_keys: !FindInMap [LambdaVariable,Tag, Key]
            tag_all_values: !FindInMap [LambdaVariable,Tag, All]
            tag_accept_values: !FindInMap [LambdaVariable,Tag, Accept]
            tag_reject_values: !FindInMap [LambdaVariable,Tag, Reject]
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Supress false warning since the Role is set using !Sub"

  FlowLogTimerCheck:
    Condition: CreateEventBus
    Type: "AWS::Events::Rule"
    Properties:
      Name: FlowLogTag-TimerRule
      Description: FlowLog - Periodic check to trigger FlowLogActivator Lambda
      ScheduleExpression: !Sub "rate(${ComplianceFrequency} hours)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt FlowLogActivator.Arn
          Id: TargetFunction

  FlowLogTimerCheckEventPermission:
    Condition: CreateEventBus
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FlowLogActivator
      Principal: events.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt FlowLogTimerCheck.Arn

  FlowLogTagHubRule:
    Condition: CreateEventBus
    DependsOn:
      - FlowLogEventBus
    Type: AWS::Events::Rule
    Properties:
      Name: FlowLogTag-HubRule
      Description: FlowLog - Trigger for create/update tag from spoke account to hub account via dedicated Event Bus
      EventBusName: !Ref EventBusName
      EventPattern:
        {
          "source": [
            "aws.tag"
          ],
          "detail-type": [
            "Tag Change on Resource"
          ],
          "detail": {
            "changed-tag-keys": !FindInMap [LambdaVariable, Tag, KeyList],
            "service": [
              "ec2"
            ],
            "resource-type": [
              "subnet",
              "vpc"
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt FlowLogActivator.Arn
          Id: "TagCreateUpdateHubTrigger"

  FlowLogTagHubRulePermission:
    Condition: CreateEventBus
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FlowLogActivator
      Principal: events.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt FlowLogTagHubRule.Arn

  FlowLogTagLocalRule:
    Condition: CreateEventBus
    DependsOn:
      - FlowLogEventBus
    Type: AWS::Events::Rule
    Properties:
      Name: FlowLogTag-LocalRule
      Description: FlowLog - Trigger for create/update tag from local account via Default Event Bus
      EventPattern:
        {
          "account": [
            !Ref "AWS::AccountId"
          ],
          "source": [
            "aws.tag"
          ],
          "detail-type": [
            "Tag Change on Resource"
          ],
          "detail": {
            "changed-tag-keys": !FindInMap [LambdaVariable, Tag, KeyList],
            "service": [
              "ec2"
            ],
            "resource-type": [
              "subnet",
              "vpc"
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !GetAtt FlowLogActivator.Arn
          Id: "TagCreateUpdateLocalTrigger"

  FlowLogTagLocalRulePermission:
    Condition: CreateEventBus
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FlowLogActivator
      Principal: events.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !GetAtt FlowLogTagLocalRule.Arn

  FlowLogHubAssumeRole:
    Type: AWS::IAM::Role
    Condition: OriginRegion
    Properties:
      RoleName: !FindInMap [LambdaVariable,Role, Spoke]
      Description: FlowLog - Role assumed by FlowLogActivator Lambda to access each linked/spoke account
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref EventBusDestinationAccount
                  - ':root'
            Action:
              - sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref OrgId
      Path: "/"
      Policies:
        - PolicyName: VPCFlowLogEnablerPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeFlowLogs
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:CreateFlowLogs
                  - ec2:DeleteFlowLogs
                  - logs:CreateLogDelivery
                  - logs:DeleteLogDelivery
                Resource: '*'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Describe and Create Flow Logs require resource types = *"
          - id: W28
            reason: "Explicit role name required for reference on other resources"

  FlowLogTagSpokeRule:
    Condition: NonEventBus
    Type: AWS::Events::Rule
    Properties:
      Name: FlowLogTag-SpokeRule
      Description: FlowLog - Trigger for create/update tag from spoke account via dedicated Event Bus
      EventPattern:
        {
          "account": [
            !Ref "AWS::AccountId"
          ],
          "source": [
            "aws.tag"
          ],
          "detail-type": [
            "Tag Change on Resource"
          ],
          "detail": {
            "changed-tag-keys": !FindInMap [LambdaVariable, Tag, KeyList],
            "service": [
              "ec2"
            ],
            "resource-type": [
              "subnet",
              "vpc"
            ]
          }
        }
      State: ENABLED
      Targets:
        - Arn: !Sub arn:aws:events:${AWS::Region}:${EventBusDestinationAccount}:event-bus/${EventBusName}
          Id: "TagCreateUpdateTrigger"
          RoleArn: !GetAtt FlowLogTagSpokeRuleDeliveryRole.Arn

  FlowLogTagSpokeRuleDeliveryRole:
    Condition: NonEventBus
    Type: AWS::IAM::Role
    Properties:
      Description: FlowLog - Role to send event from Spoke account to the Hub account event buses
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
                Service: events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VPCTagEventBusDeliveryRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !Sub arn:aws:events:${AWS::Region}:${EventBusDestinationAccount}:event-bus/${EventBusName}
